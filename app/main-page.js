"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var main_view_model_1 = require("./main-view-model");
var auth_service_1 = require("./auth-service");
var geolocation = require("nativescript-geolocation");
var enums_1 = require("tns-core-modules/ui/enums"); // used to describe at what accuracy the location should be get
var page;
function navigatingTo(args) {
    page = args.object;
    page.bindingContext = new main_view_model_1.HelloWorldModel();
}
exports.navigatingTo = navigatingTo;
function onLoginTap() {
    auth_service_1.tnsOauthLogin("facebook");
}
exports.onLoginTap = onLoginTap;
function onLoginTapg() {
    auth_service_1.tnsOauthLogin("google");
}
exports.onLoginTapg = onLoginTapg;
function onLoginTapTwit() {
    console.log(geolocation.enableLocationRequest());
    var a = geolocation.getCurrentLocation({ desiredAccuracy: enums_1.Accuracy.high, maximumAge: 5000, timeout: 20000 });
    a.then(function (return_a) {
        console.log(return_a);
        //distance(return_a,);
        var degree = angleFromCoordinate(return_a.latitude, return_a.longitude, 21.4225, 39.8262);
        page.bindingContext.myText = degree;
        console.log(degree);
        //var myLabel = page.getViewById("myLabel");
        // myLabel.text = "Hello World";
    });
    //tnsOauthLogin("twitter");  
}
exports.onLoginTapTwit = onLoginTapTwit;
function onLogoutTap() {
    auth_service_1.tnsOauthLogout();
}
exports.onLogoutTap = onLogoutTap;
function angleFromCoordinate(lat1, long1, lat2, long2) {
    var dLon = (long2 - long1);
    var y = Math.sin(dLon) * Math.cos(lat2);
    var x = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1)
        * Math.cos(lat2) * Math.cos(dLon);
    var brng = Math.atan2(y, x);
    brng = brng * 180 / Math.PI;
    brng = (brng + 360) % 360;
    brng = 360 - brng; // count degrees counter-clockwise - remove to make clockwise
    return brng;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEscURBQW9EO0FBQ3BELCtDQUErRDtBQUMvRCxzREFBd0Q7QUFDeEQsbURBQXFELENBQUMsK0RBQStEO0FBRXJILElBQUksSUFBVSxDQUFDO0FBRWYsU0FBZ0IsWUFBWSxDQUFDLElBQWU7SUFDMUMsSUFBSSxHQUFTLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDekIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLGlDQUFlLEVBQUUsQ0FBQztBQUM5QyxDQUFDO0FBSEQsb0NBR0M7QUFFRCxTQUFnQixVQUFVO0lBQ3hCLDRCQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDNUIsQ0FBQztBQUZELGdDQUVDO0FBQ0QsU0FBZ0IsV0FBVztJQUN6Qiw0QkFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzFCLENBQUM7QUFGRCxrQ0FFQztBQUNELFNBQWdCLGNBQWM7SUFDN0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxDQUFDO0lBQ2pELElBQUksQ0FBQyxHQUFHLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLGVBQWUsRUFBRSxnQkFBUSxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUM1RztJQUNELENBQUMsQ0FBQyxJQUFJLENBQUUsVUFBQSxRQUFRO1FBQ2hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEIsc0JBQXNCO1FBQ3RCLElBQUksTUFBTSxHQUFHLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRyxPQUFPLEVBQUMsT0FBTyxDQUFDLENBQUM7UUFDekYsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3BDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFcEIsNENBQTRDO1FBQ3pDLGdDQUFnQztJQUNuQyxDQUFDLENBQUMsQ0FBQztJQUdELDZCQUE2QjtBQUMvQixDQUFDO0FBakJELHdDQWlCQztBQUdELFNBQWdCLFdBQVc7SUFDekIsNkJBQWMsRUFBRSxDQUFDO0FBQ25CLENBQUM7QUFGRCxrQ0FFQztBQUVELFNBQVMsbUJBQW1CLENBQUUsSUFBSSxFQUFHLEtBQUssRUFBRyxJQUFJLEVBQUUsS0FBSztJQUVwRCxJQUFJLElBQUksR0FBRyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsQ0FBQztJQUUzQixJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO1VBQzlDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUUxQyxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUU1QixJQUFJLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO0lBQzVCLElBQUksR0FBRyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDMUIsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyw2REFBNkQ7SUFFaEYsT0FBTyxJQUFJLENBQUM7QUFDaEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RGF0YSB9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL2RhdGEvb2JzZXJ2YWJsZVwiO1xuaW1wb3J0IHsgUGFnZSB9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3VpL3BhZ2VcIjtcbmltcG9ydCB7IEhlbGxvV29ybGRNb2RlbCB9IGZyb20gXCIuL21haW4tdmlldy1tb2RlbFwiO1xuaW1wb3J0IHsgdG5zT2F1dGhMb2dpbiwgdG5zT2F1dGhMb2dvdXQgfSBmcm9tIFwiLi9hdXRoLXNlcnZpY2VcIjtcbmltcG9ydCAqIGFzIGdlb2xvY2F0aW9uIGZyb20gXCJuYXRpdmVzY3JpcHQtZ2VvbG9jYXRpb25cIjtcbmltcG9ydCB7IEFjY3VyYWN5IH0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvdWkvZW51bXNcIjsgLy8gdXNlZCB0byBkZXNjcmliZSBhdCB3aGF0IGFjY3VyYWN5IHRoZSBsb2NhdGlvbiBzaG91bGQgYmUgZ2V0XG5cbmxldCBwYWdlOiBQYWdlO1xuXG5leHBvcnQgZnVuY3Rpb24gbmF2aWdhdGluZ1RvKGFyZ3M6IEV2ZW50RGF0YSkge1xuICBwYWdlID0gPFBhZ2U+YXJncy5vYmplY3Q7XG4gIHBhZ2UuYmluZGluZ0NvbnRleHQgPSBuZXcgSGVsbG9Xb3JsZE1vZGVsKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvbkxvZ2luVGFwKCkge1xuICB0bnNPYXV0aExvZ2luKFwiZmFjZWJvb2tcIik7XG59XG5leHBvcnQgZnVuY3Rpb24gb25Mb2dpblRhcGcoKSB7XG4gIHRuc09hdXRoTG9naW4oXCJnb29nbGVcIik7XG59XG5leHBvcnQgZnVuY3Rpb24gb25Mb2dpblRhcFR3aXQoKSB7XG5cdGNvbnNvbGUubG9nKGdlb2xvY2F0aW9uLmVuYWJsZUxvY2F0aW9uUmVxdWVzdCgpKTtcblx0dmFyIGEgPSBnZW9sb2NhdGlvbi5nZXRDdXJyZW50TG9jYXRpb24oeyBkZXNpcmVkQWNjdXJhY3k6IEFjY3VyYWN5LmhpZ2gsIG1heGltdW1BZ2U6IDUwMDAsIHRpbWVvdXQ6IDIwMDAwIH0pXG47XG5hLnRoZW4oIHJldHVybl9hID0+IHtcbmNvbnNvbGUubG9nKHJldHVybl9hKTtcbi8vZGlzdGFuY2UocmV0dXJuX2EsKTtcbnZhciBkZWdyZWUgPSBhbmdsZUZyb21Db29yZGluYXRlKHJldHVybl9hLmxhdGl0dWRlLHJldHVybl9hLmxvbmdpdHVkZSAsIDIxLjQyMjUsMzkuODI2Mik7XG5wYWdlLmJpbmRpbmdDb250ZXh0Lm15VGV4dCA9IGRlZ3JlZTtcbmNvbnNvbGUubG9nKGRlZ3JlZSk7XG5cbi8vdmFyIG15TGFiZWwgPSBwYWdlLmdldFZpZXdCeUlkKFwibXlMYWJlbFwiKTtcbiAgIC8vIG15TGFiZWwudGV4dCA9IFwiSGVsbG8gV29ybGRcIjtcbn0pO1xuXG5cbiAgLy90bnNPYXV0aExvZ2luKFwidHdpdHRlclwiKTsgIFxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBvbkxvZ291dFRhcCgpIHtcbiAgdG5zT2F1dGhMb2dvdXQoKTtcbn1cblxuZnVuY3Rpb24gYW5nbGVGcm9tQ29vcmRpbmF0ZSggbGF0MSwgIGxvbmcxLCAgbGF0MiwgbG9uZzIpIHtcblxuICAgIHZhciBkTG9uID0gKGxvbmcyIC0gbG9uZzEpO1xuXG4gICAgdmFyIHkgPSBNYXRoLnNpbihkTG9uKSAqIE1hdGguY29zKGxhdDIpO1xuICAgIHZhciB4ID0gTWF0aC5jb3MobGF0MSkgKiBNYXRoLnNpbihsYXQyKSAtIE1hdGguc2luKGxhdDEpXG4gICAgICAgICAgICAqIE1hdGguY29zKGxhdDIpICogTWF0aC5jb3MoZExvbik7XG5cbiAgICB2YXIgYnJuZyA9IE1hdGguYXRhbjIoeSwgeCk7XG5cbiAgICBicm5nID0gYnJuZyAqIDE4MCAvIE1hdGguUEk7XG4gICAgYnJuZyA9IChicm5nICsgMzYwKSAlIDM2MDtcbiAgICBicm5nID0gMzYwIC0gYnJuZzsgLy8gY291bnQgZGVncmVlcyBjb3VudGVyLWNsb2Nrd2lzZSAtIHJlbW92ZSB0byBtYWtlIGNsb2Nrd2lzZVxuXG4gICAgcmV0dXJuIGJybmc7XG59XG5cbiJdfQ==